#include <stdio.h>
#define MAX_NODES 100

int adjacencyMatrix[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];
int stack[MAX_NODES];
int top = -1;
int queue[MAX_NODES];
int front = -1, rear = -1;

void push(int vertex) {
    if (top == MAX_NODES - 1) {
        printf("Stack is full.\n");
    } else {
        top++;
        stack[top] = vertex;
    }
}

int pop() {
    if (top == -1) {
        printf("Stack is empty.\n");
        return -1;
    } else {
        int element = stack[top];
        top--;
        return element;
    }
}

void enqueue(int vertex) {
    if (rear == MAX_NODES - 1) {
        printf("Queue is full.\n");
    } else {
        if (front == -1)
            front = 0;
        rear++;
        queue[rear] = vertex;
    }
}

int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return -1;
    } else {
        int element = queue[front];
        front++;
        return element;
    }
}

void breadthFirstSearch(int startNode, int numNodes) {
    int i, currentVertex;
    enqueue(startNode);
    visited[startNode] = 1;
   

    while (front != -1 && front <= rear) {
        currentVertex = dequeue();
        printf("%d ", currentVertex);

        for (i = 0; i < numNodes; i++) {
            if (adjacencyMatrix[currentVertex][i] == 1 && visited[i] == 0) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

void depthFirstSearch(int startNode, int numNodes) {
    int i;
    push(startNode);
    visited[startNode] = 1;
 

    while (top != -1) {
        int currentVertex = pop();
        printf("%d ", currentVertex);

        for (i = 0; i < numNodes; i++) {
            if (adjacencyMatrix[currentVertex][i] == 1 && visited[i] == 0) {
                push(i);
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

int main() {
    int numNodes, startNode;
    int i, j;

    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &numNodes);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < numNodes; i++) {
        for (j = 0; j < numNodes; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    printf("Enter the starting node for traversal: ");
    scanf("%d", &startNode);

    for (i = 0; i < numNodes; i++) {
        visited[i] = 0;
    }

    printf("BFS Traversal:\n");
    breadthFirstSearch(startNode, numNodes);

    for (i = 0; i < numNodes; i++) {
        visited[i] = 0;
    }

    printf("DFS Traversal:\n");
    depthFirstSearch(startNode, numNodes);

    return 0;
}
